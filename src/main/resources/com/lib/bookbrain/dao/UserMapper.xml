<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lib.dao.UserMapper">
    <resultMap id="BaseResultMap" type="com.lib.model.User">
        <id property="userId" column="user_id" jdbcType="INTEGER"/>
        <result property="authenticationString" column="authentication_string" jdbcType="VARCHAR"/>
        <result property="displayName" column="display_name" jdbcType="VARCHAR"/>
        <result property="userEmail" column="user_email" jdbcType="VARCHAR"/>
        <result property="userPhoneNumber" column="user_phone_number" jdbcType="VARCHAR"/>
        <result property="state" column="state" jdbcType="INTEGER"/>
        <result property="authority" column="authority" jdbcType="INTEGER"/>
        <result property="surname" column="surname" jdbcType="VARCHAR"/>
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="age" column="age" jdbcType="TINYINT"/>
        <result property="sex" column="sex" jdbcType="TINYINT"/>
        <result property="lastLoginTime" column="last_login_time" jdbcType="TIMESTAMP"/>
        <result property="createBy" column="create_by" jdbcType="INTEGER"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateBy" column="update_by" jdbcType="INTEGER"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="revision" column="revision" jdbcType="INTEGER"/>
    </resultMap>
    <insert id="create" useGeneratedKeys="true" keyProperty="entity.userId" parameterType="com.lib.model.Payload">
        insert into user(authentication_string, display_name, user_email, user_phone_number, state, authority,
                         surname, name, age, sex, last_login_time, create_by, create_time, update_by, update_time,
                         revision)
        values (MD5(#{entity.authenticationString}), #{entity.displayName}, #{entity.userEmail},
                #{entity.userPhoneNumber},
                #{entity.state}, #{entity.authority}, #{entity.surname}, #{entity.name}, #{entity.age}, #{entity.sex},
                #{entity.lastLoginTime}, #{entity.createBy}, now(), #{entity.updateBy}, now(), 0);
    </insert>
    <update id="update" parameterType="com.lib.model.Payload">
        update user u
        <set>
            <if test="entity.authenticationString != null and entity.authenticationString != ''">
                authentication_string = MD5(#{entity.authenticationString}),
            </if>
            <if test="entity.displayName != null and entity.displayName != ''">
                display_name = #{entity.displayName},
            </if>
            <if test="entity.userEmail != null and entity.userEmail != ''">
                user_email = #{entity.userEmail},
            </if>
            <if test="entity.state != null">
                state = #{entity.state},
            </if>
            <if test="entity.authority != null">
                authority = #{entity.authority},
            </if>
            <if test="entity.surname != null">
                surname = #{entity.surname},
            </if>
            <if test="entity.name != null">
                name = #{entity.name},
            </if>
            <if test="entity.age != null">
                age = #{entity.age},
            </if>
            <if test="entity.sex != null">
                sex = #{entity.sex},
            </if>
            <if test="entity.lastLoginTime != null">
                last_login_time = #{entity.lastLoginTime},
            </if>
            <if test="entity.updateBy != null">
                update_by = #{entity.updateBy},
            </if>
            <if test="1 == 1">
                update_time = now(),
            </if>
            <if test="entity.revision != null">
                revision = #{entity.revision},
            </if>
        </set>
        where user_id = #{id}
    </update>
    <update id="delete" parameterType="com.lib.model.Payload">
        update user u
        set u.state = #{entity.state}
        where u.user_id = #{entity.userId};
    </update>
    <select id="getById" resultMap="BaseResultMap" parameterType="com.lib.model.Payload">
        select u.user_id,
               u.`display_name`,
               u.`user_email`,
               u.`user_phone_number`,
               u.`state`,
               u.`authority`,
               u.`surname`,
               u.`name`,
               u.`age`,
               u.`sex`,
               u.`last_login_time`,
               u.`create_by`,
               u.`create_time`,
               u.`update_by`,
               u.`update_time`,
               u.`revision`
        from user u
        where u.`user_id` = #{id};
    </select>
    <select id="login" resultType="java.lang.Integer" parameterType="com.lib.model.Payload">
        select count(*)
        from user u
        where u.user_id = #{entity.userId}
          and u.authentication_string = MD5(#{entity.authenticationString});
    </select>
    <select id="has" resultType="java.lang.Integer" parameterType="com.lib.model.Payload">
        select count(*)
        from user u
        where user_id = #{id};
    </select>
    <select id="getBy" resultMap="BaseResultMap">
        select u.user_id,
        u.display_name,
        u.user_email,
        u.user_phone_number,
        u.state,
        u.authority,
        u.surname,
        u.name,
        u.age,
        u.sex,
        u.last_login_time,
        u.create_by,
        u.create_time,
        u.update_by,
        u.update_time,
        u.revision
        from user u
        <where>
            <if test="entity != null">
                <if test="entity.userId != null">
                    u.user_id = #{entity.userId}
                </if>
                <if test="entity.surname != null and entity.surname != ''">
                    and u.surname = #{entity.surname}
                </if>
                <if test="entity.name != null and entity.name != ''">
                    and u.name = #{entity.name}
                </if>
                <if test="entity.userEmail != null and entity.userEmail != ''">
                    and u.user_email = #{entity.userEmail}
                </if>
                <if test="entity.userPhoneNumber != null and entity.userPhoneNumber != ''">
                    and u.user_phone_number like CONCAT(#{entity.userPhoneNumber}, '%')
                </if>
                <if test="entity.name != null and entity.name != ''">
                    and u.name like CONCAT('%', #{entity.name}, '%')
                </if>
            </if>
            <if test="filter">
                and u.age between #{lowerAge} and #{upperAge}
                and u.last_login_time between #{lowerLastLoginTime} and #{upperLastLoginTime}
                and u.create_time between #{lowerCreateTime} and #{upperCreateTime}
                and u.update_time between #{lowerUpdateTime} and #{upperUpdateTime}
            </if>
        </where>
        limit #{pageStart}, #{pageSize}
    </select>

    <select id="getByUpdate" resultMap="BaseResultMap">
    </select>
</mapper>