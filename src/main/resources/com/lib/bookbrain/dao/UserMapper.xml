<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lib.bookbrain.dao.UserMapper">
    <resultMap id="BaseResultMap" type="com.lib.bookbrain.model.entity.User">
        <id property="userId" column="user_id" jdbcType="INTEGER"/>
        <result property="authenticationString" column="authentication_string" jdbcType="VARCHAR"/>
        <result property="displayName" column="display_name" jdbcType="VARCHAR"/>
        <result property="userEmail" column="user_email" jdbcType="VARCHAR"/>
        <result property="userPhoneNumber" column="user_phone_number" jdbcType="VARCHAR"/>
        <result property="condition" column="condition" jdbcType="INTEGER"/>
        <result property="authority" column="authority" jdbcType="INTEGER"/>
        <result property="surname" column="surname" jdbcType="VARCHAR"/>
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="age" column="age" jdbcType="TINYINT"/>
        <result property="sex" column="sex" jdbcType="TINYINT"/>
        <result property="lastLoginTime" column="last_login_time" jdbcType="TIMESTAMP"/>
        <result property="createBy" column="create_by" jdbcType="INTEGER"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateBy" column="update_by" jdbcType="INTEGER"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="revision" column="revision" jdbcType="INTEGER"/>
    </resultMap>
    <insert id="create" useGeneratedKeys="true" keyProperty="userId" parameterType="com.lib.bookbrain.model.Payload">
        insert into user(authentication_string, display_name, user_email, user_phone_number, `condition`, authority,
                         surname, name, age, sex, last_login_time, create_by, create_time, update_by, update_time,
                         revision)
        values (MD5(#{authenticationString}), #{displayName}, #{userEmail},
                #{userPhoneNumber},
                #{condition}, #{authority}, #{surname}, #{name}, #{age}, #{sex},
                #{lastLoginTime}, #{createBy}, now(), #{updateBy}, now(), 0);
    </insert>
    <update id="update" parameterType="com.lib.bookbrain.model.Payload">
        update user u
        <set>
            <if test="authenticationString != null and authenticationString != ''">
                u.`authentication_string` = MD5(#{authenticationString}),
            </if>
            <if test="displayName != null and displayName != ''">
                u.`display_name` = #{displayName},
            </if>
            <if test="userEmail != null and userEmail != ''">
                u.`user_email` = #{userEmail},
            </if>
            <if test="condition != null">
                u.`condition` = #{condition},
            </if>
            <if test="authority != null">
                u.`authority` = #{authority},
            </if>
            <if test="surname != null">
                u.`surname` = #{surname},
            </if>
            <if test="name != null">
                u.`name` = #{name},
            </if>
            <if test="age != null">
                u.`age` = #{age},
            </if>
            <if test="sex != null">
                u.`sex` = #{sex},
            </if>
            <if test="lastLoginTime != null">
                u.`last_login_time` = #{lastLoginTime},
            </if>
            <if test="updateBy != null">
                u.`update_by` = #{updateBy},
            </if>
            <if test="1 == 1">
                u.`update_time` = now(),
            </if>
            <if test="revision != null">
                u.`revision` = #{revision},
            </if>
        </set>
        where u.`user_id` = #{id}
    </update>
    <update id="delete" parameterType="com.lib.bookbrain.model.Payload">
        update user u
        set u.`condition` = #{condition}
        where u.`user_id` = #{userId};
    </update>
    <select id="getById" resultMap="BaseResultMap" parameterType="com.lib.bookbrain.model.Payload">
        select u.`user_id`,
               u.`display_name`,
               u.`user_email`,
               u.`user_phone_number`,
               u.`condition`,
               u.`authority`,
               u.`surname`,
               u.`name`,
               u.`age`,
               u.`sex`,
               u.`last_login_time`,
               u.`create_by`,
               u.`create_time`,
               u.`update_by`,
               u.`update_time`,
               u.`revision`
        from user u
        where u.`user_id` = #{id};
    </select>
    <select id="login" resultType="java.lang.Integer" parameterType="com.lib.bookbrain.model.Payload">
        select count(*)
        from user u
        where u.`user_id` = #{userId}
          and u.`authentication_string` = MD5(#{authenticationString});
    </select>
    <select id="has" resultType="java.lang.Integer" parameterType="com.lib.bookbrain.model.Payload">
        select count(*)
        from user u
        where user_id = #{id};
    </select>
    <select id="getBy" resultMap="BaseResultMap">
        select u.`user_id`,
        u.`display_name`,
        u.`user_email`,
        u.`user_phone_number`,
        u.`condition`,
        u.`authority`,
        u.`surname`,
        u.`name`,
        u.`age`,
        u.`sex`,
        u.`last_login_time`,
        u.`create_by`,
        u.`create_time`,
        u.`update_by`,
        u.`update_time`,
        u.`revision`
        from user u
        <where>
            <if test="!= null">
                <if test="userId != null">
                    u.`user_id` = #{userId}
                </if>
                <if test="surname != null and surname != ''">
                    and u.`surname` = #{surname}
                </if>
                <if test="name != null and name != ''">
                    and u.`name` = #{name}
                </if>
                <if test="userEmail != null and userEmail != ''">
                    and u.`user_email` = #{userEmail}
                </if>
                <if test="userPhoneNumber != null and userPhoneNumber != ''">
                    and u.`user_phone_number` like CONCAT(#{userPhoneNumber}, '%')
                </if>
                <if test="name != null and name != ''">
                    and u.`name` like CONCAT('%', #{name}, '%')
                </if>
            </if>
            <if test="filter">
                and u.`age` between #{lowerAge} and #{upperAge}
                and u.`last_login_time` between #{lowerLastLoginTime} and #{upperLastLoginTime}
                and u.`create_time` between #{lowerCreateTime} and #{upperCreateTime}
                and u.`update_time` between #{lowerUpdateTime} and #{upperUpdateTime}
            </if>
        </where>
        limit #{pageStart}, #{pageSize}
    </select>

    <select id="getByUpdate" resultMap="BaseResultMap">
    </select>
</mapper>