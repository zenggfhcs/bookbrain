<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lib.dao.BookInfoMapper">
    <resultMap id="BaseResultMap" type="com.lib.model.BookInfo">
        <id property="bookInfoId" column="book_info_id" jdbcType="INTEGER"/>
        <result property="publishPlace" column="publish_place" jdbcType="VARCHAR"/>
        <result property="isbn" column="isbn" jdbcType="VARCHAR"/>
        <result property="cip" column="cip" jdbcType="VARCHAR"/>
        <result property="bookName" column="book_name" jdbcType="VARCHAR"/>
        <result property="bookType" column="book_type" jdbcType="VARCHAR"/>
        <result property="cover" column="cover" jdbcType="VARCHAR"/>
        <result property="author" column="author" jdbcType="VARCHAR"/>
        <result property="describe" column="describe" jdbcType="VARCHAR"/>
        <result property="publishDate" column="publish_date" jdbcType="DATE"/>
        <result property="keyword" column="keyword" jdbcType="VARCHAR"/>
        <result property="lang" column="lang" jdbcType="VARCHAR"/>
        <result property="price" column="price" jdbcType="DECIMAL"/>
        <result property="stock" column="stock" jdbcType="INTEGER"/>
        <result property="createBy" column="create_by" jdbcType="INTEGER"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateBy" column="update_by" jdbcType="INTEGER"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="revision" column="revision" jdbcType="INTEGER"/>
        <association property="publisher" column="{id=publish_id}" javaType="com.lib.model.Publisher"
                     select="com.lib.dao.PublisherMapper.getById"/>
    </resultMap>
    <insert id="create" parameterType="com.lib.model.Payload" useGeneratedKeys="true" keyColumn="entity.bookInfoId">
        insert into book_info (publish_id, publish_place, isbn, cip, book_name, book_type, cover, author,
                               `describe`, publish_date, keyword, lang, price, stock, create_by, create_time, update_by,
                               update_time, revision)
        VALUES ( #{entity.publisher.publishId}, #{entity.publishPlace}, #{entity.isbn}, #{entity.cip}
               , #{entity.bookName}
               , #{entity.bookType}, #{entity.cover}, #{entity.author}, #{entity.describe}
               , #{entity.publishDate}
               , #{entity.keyword}, #{entity.lang}, #{entity.price}, #{entity.stock}, #{entity.createBy}
               , NOW(), #{entity.updateBy}, now(), #{entity.revision})
    </insert>
    <update id="update" parameterType="com.lib.model.Payload">
        update book_info bif
        <set>
            <if test="entity.publisher.publishId != null">
                bif.`publish_id` = #{entity.publisher.publishId},
            </if>
            <if test="entity.publishPlace != null and entity.publishPlace != ''">
                bif.`publish_place` = #{entity.publishPlace},
            </if>
            <if test="entity.isbn != null and entity.isbn != ''">
                bif.`isbn` = #{entity.isbn},
            </if>
            <if test="entity.cip != null and entity.cip != ''">
                bif.`cip` = #{entity.cip},
            </if>
            <if test="entity.bookName != null and entity.bookName != ''">
                bif.`book_name` = #{entity.bookName},
            </if>
            <if test="entity.bookType != null and entity.bookType != ''">
                bif.`book_type` = #{entity.bookType},
            </if>
            <if test="entity.cover != null and entity.cover != ''">
                bif.`cover` = #{entity.cover},
            </if>
            <if test="entity.author != null and entity.author != ''">
                bif.`author` = #{entity.author},
            </if>
            <if test="entity.publishDate != null">
                bif.`publish_date` = #{entity.publishDate},
            </if>
            <if test="entity.keyword != null and entity.keyword != ''">
                bif.`keyword` = #{entity.keyword},
            </if>
            <if test="entity.lang != null and entity.lang != ''">
                bif.`lang` = #{entity.lang},
            </if>
            <if test="entity.price != null">
                bif.`price` = #{entity.price},
            </if>
            <if test="entity.stock != null">
                bif.`stock` = #{entity.stock},
            </if>
            <if test="entity.updateBy != null">
                bif.`update_by` = #{entity.updateBy},
            </if>
            <if test="1 == 1">
                bif.`update_time` = NOW(),
            </if>
            <if test="entity.describe != null">
                bif.`describe` = #{entity.describe},
            </if>
            <if test="1 == 1">
                bif.`revision` = (1 + bif.`revision`) % 2147483647,
            </if>
        </set>
        where bif.`book_info_id` = #{id} and bif.`revision` = #{entity.revision}
    </update>
    <delete id="delete" parameterType="com.lib.model.Payload">
        delete
        from book_info
        where book_info_id = #{id}
    </delete>
    <select id="getBy" resultMap="BaseResultMap">
        select distinct bif.`book_info_id`,
        bif.`publish_id`,
        bif.`publish_place`,
        bif.`isbn`,
        bif.`cip`,
        bif.`book_name`,
        bif.`book_type`,
        bif.`cover`,
        bif.`author`,
        bif.`describe`,
        bif.`publish_date`,
        bif.`keyword`,
        bif.`lang`,
        bif.`price`,
        bif.`stock`,
        bif.`create_by`,
        bif.`create_time`,
        bif.`update_by`,
        bif.`update_time`,
        bif.`revision`
        from book_info bif
        <where>
            <if test="payload.entity != null">
                <if test="payload.entity.bookInfoId != null">
                    and bif.`book_info_id` = #{payload.entity.bookInfoId}
                </if>
                <if test="payload.entity.bookName != null">
                    and bif.`book_name` like concat('%', #{payload.entity.bookName}, '%')
                </if>
            </if>
        </where>
        limit #{filter.pageStart}, #{filter.pageSize}
    </select>
    <select id="getById" resultMap="BaseResultMap" parameterType="com.lib.model.Payload">
        select distinct bif.`book_info_id`,
                        bif.`publish_id`,
                        bif.`publish_place`,
                        bif.`isbn`,
                        bif.`cip`,
                        bif.`book_name`,
                        bif.`book_type`,
                        bif.`cover`,
                        bif.`author`,
                        bif.`describe`,
                        bif.`publish_date`,
                        bif.`keyword`,
                        bif.`lang`,
                        bif.`price`,
                        bif.`stock`,
                        bif.`create_by`,
                        bif.`create_time`,
                        bif.`update_by`,
                        bif.`update_time`,
                        bif.`revision`
        from book_info bif
        where bif.`book_info_id` = #{id}
    </select>

    <select id="getByUpdate" resultMap="BaseResultMap">
        select
        <trim suffixOverrides=",">
            <if test="entity.author != null">
                bif.`author`,
            </if>
        </trim>
        from book_info bif
        where bif.`book_info_id` = #{id}
    </select>
</mapper>