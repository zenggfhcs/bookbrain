<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
      "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lib.bookbrain.dao.BookInfoMapper">
   <resultMap id="BaseResultMap" type="com.lib.bookbrain.model.entity.BookInfo">
      <id property="id" column="book_info_id" jdbcType="INTEGER"/>
      <result property="publishPlace" column="publish_place" jdbcType="VARCHAR"/>
      <result property="isbn" column="isbn" jdbcType="VARCHAR"/>
      <result property="cip" column="cip" jdbcType="VARCHAR"/>
      <result property="bookName" column="book_name" jdbcType="VARCHAR"/>
      <result property="bookType" column="book_type" jdbcType="VARCHAR"/>
      <result property="cover" column="cover" jdbcType="VARCHAR"/>
      <result property="author" column="author" jdbcType="VARCHAR"/>
      <result property="describe" column="describe" jdbcType="VARCHAR"/>
      <result property="publishDate" column="publish_date" jdbcType="DATE"/>
      <result property="keyword" column="keyword" jdbcType="VARCHAR"/>
      <result property="lang" column="lang" jdbcType="VARCHAR"/>
      <result property="price" column="price" jdbcType="DECIMAL"/>
      <result property="stock" column="stock" jdbcType="INTEGER"/>
      <result property="createdBy" column="created_by" jdbcType="INTEGER"/>
      <result property="creationTime" column="creation_time" jdbcType="TIMESTAMP"/>
      <result property="updatedBy" column="updated_by" jdbcType="INTEGER"/>
      <result property="lastUpdateTime" column="last_update_time" jdbcType="TIMESTAMP"/>
      <result property="revision" column="revision" jdbcType="INTEGER"/>
      <association property="publisher" column="{id=publish_id}" javaType="com.lib.bookbrain.model.entity.Publisher"
                   select="com.lib.bookbrain.dao.PublisherMapper.getById"/>
   </resultMap>
   <insert id="insert" parameterType="com.lib.bookbrain.model.Payload" useGeneratedKeys="true"
           keyProperty="entity.bookInfoId">
      insert into book_info (`publisher_id`, `publish_place`, `isbn`, `cip`, `book_name`,
                             `book_type`, `cover`, `author`, `describe`, `publish_date`,
                             `keyword`, `lang`, `price`, `stock`, `created_by`, `creation_time`,
                             `updated_by`, `last_update_time`, `revision`)
      select #{entity.publisher.id}
           , #{entity.publishPlace}
           , #{entity.isbn}
           , #{entity.cip}
           , #{entity.bookName}
           , #{entity.bookType}
           , #{entity.cover}
           , #{entity.author}
           , #{entity.describe}
           , #{entity.publishDate}
           , #{entity.keyword}
           , #{entity.lang}
           , #{entity.price}
           , #{entity.stock}
           , #{entity.createdBy}
           , NOW()
           , #{entity.updatedBy}
           , now()
           , 0
      from authority a
      where a.`id` = #{tokenBody.id}
        and a.`insert_book_info_privilege` = 1
   </insert>
   <update id="update" parameterType="com.lib.bookbrain.model.Payload">
      update book_info bif, authority auth
      <set>
         <if test="entity != null">
            <if test="entity.publishId != null">
               bif.`publish_id` = #{entity.publishId},
            </if>
            <if test="entity.publishPlace != null and entity.publishPlace != ''">
               bif.`publish_place` = #{entity.publishPlace},
            </if>
            <if test="entity.isbn != null and entity.isbn != ''">
               bif.`isbn` = #{entity.isbn},
            </if>
            <if test="entity.cip != null and entity.cip != ''">
               bif.`cip` = #{entity.cip},
            </if>
            <if test="entity.bookName != null and entity.bookName != ''">
               bif.`book_name` = #{entity.bookName},
            </if>
            <if test="entity.bookType != null and entity.bookType != ''">
               bif.`book_type` = #{entity.bookType},
            </if>
            <if test="entity.cover != null and entity.cover != ''">
               bif.`cover` = #{entity.cover},
            </if>
            <if test="author != null and author != ''">
               bif.`author` = #{entity.author},
            </if>
            <if test="entity.publishDate != null">
               bif.`publish_date` = #{entity.publishDate},
            </if>
            <if test="entity.keyword != null and entity.keyword != ''">
               bif.`keyword` = #{entity.keyword},
            </if>
            <if test="entity.lang != null and entity.lang != ''">
               bif.`lang` = #{entity.lang},
            </if>
            <if test="entity.price != null">
               bif.`price` = #{entity.price},
            </if>
            <if test="entity.stock != null">
               bif.`stock` = #{entity.stock},
            </if>
            <if test="entity.updateBy != null">
               bif.`updated_by` = #{entity.updateBy},
            </if>
            <if test="entity.describe != null">
               bif.`describe` = #{entity.describe},
            </if>
         </if>
         <if test="1 == 1">
         </if>
         <if test="1 == 1">
            bif.`last_update_time` = NOW(),
            bif.`revision` = (1 + bif.`revision`) % 2147483647,
         </if>
      </set>
      where auth.`id` = #{tokenBody.id}
      and auth.`update_book_info_privilege` = 1
      and bif.`book_info_id` = #{id}
      and bif.`revision` = #{entity.revision}
   </update>
   <delete id="delete" parameterType="com.lib.bookbrain.model.Payload">
      delete bif
      from book_info bif,
           authority a
      where a.`id` = #{tokenBody.id}
        and a.delete_book_info_privilege = 1
        and bif.`id` = #{id}
   </delete>
   <select id="getBy" resultMap="BaseResultMap">
      select distinct bif.`book_info_id`,
      bif.`publish_id`,
      bif.`publish_place`,
      bif.`isbn`,
      bif.`cip`,
      bif.`book_name`,
      bif.`book_type`,
      bif.`cover`,
      bif.`author`,
      bif.`describe`,
      bif.`publish_date`,
      bif.`keyword`,
      bif.`lang`,
      bif.`price`,
      bif.`stock`,
      bif.`created_by`,
      bif.`creation_time`,
      bif.`updated_by`,
      bif.`last_update_time`,
      bif.`revision`
      from book_info bif, authority auth
      <where>
         <if test="1 == 1">
            and auth.`id` = #{tokenBody.id}
            and auth.`select_book_info_privilege` = 1
         </if>
         <if test="entity != null">
            <if test="entity.bookInfoId != null">
               and bif.`book_info_id` = #{entity.bookInfoId}
            </if>
            <if test="entity.bookName != null">
               and bif.`book_name` like concat('%', #{entity.bookName}, '%')
            </if>
         </if>
      </where>
      limit #{filter.pageStart}, #{filter.pageSize}
   </select>
   <select id="getById" resultMap="BaseResultMap" parameterType="com.lib.bookbrain.model.Payload">
      select distinct bif.`id`,
                      bif.`publisher_id`,
                      bif.`publish_place`,
                      bif.`isbn`,
                      bif.`cip`,
                      bif.`book_name`,
                      bif.`book_type`,
                      bif.`cover`,
                      bif.`author`,
                      bif.`describe`,
                      bif.`publish_date`,
                      bif.`keyword`,
                      bif.`lang`,
                      bif.`price`,
                      bif.`stock`,
                      bif.`created_by`,
                      bif.`creation_time`,
                      bif.`updated_by`,
                      bif.`last_update_time`,
                      bif.`revision`
      from book_info bif,
           authority auth
      where auth.id = #{tokenBody.id}
        and auth.`select_book_info_privilege` = 1
        and bif.`id` = #{id}
   </select>

   <select id="getByUpdate" resultMap="BaseResultMap">
      select
      <trim suffixOverrides=",">
         <if test="entity.author != null">
            bif.`author`,
         </if>
      </trim>
      from book_info bif,
      authority auth
      where auth.id = #{tokenBody.id}
      and auth.`update_book_info_privilege` = 1
      and bif.`book_info_id` = #{id}
   </select>
</mapper>