<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lib.dao.BookMapper">
    <resultMap id="BaseResultMap" type="com.lib.model.Book">
        <id column="book_id" jdbcType="INTEGER" property="bookId"/>
        <result column="book_damage_level" jdbcType="TINYINT" property="bookDamageLevel"/>
        <result column="borrowable" jdbcType="BIT" property="borrowable"/>
        <result column="create_by" jdbcType="INTEGER" property="createBy"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_by" jdbcType="INTEGER" property="updateBy"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="revision" jdbcType="INTEGER" property="revision"/>
        <association column="{id=book_info_id}" property="bookInfo" javaType="com.lib.model.BookInfo"
                     select="com.lib.dao.BookInfoMapper.getById"/>
    </resultMap>
    <insert id="create" useGeneratedKeys="true" keyColumn="entity.bookId"
            parameterType="com.lib.model.Payload">
        insert into book (book_damage_level, borrowable, book_info_id, create_by, create_time, update_by,
                          update_time, revision)
        VALUES (#{entity.bookDamageLevel}, #{entity.borrowable}, #{entity.bookInfo.bookInfoId}, #{entity.createBy},
                now(),
                #{entity.updateBy}, now(), #{entity.revision})
    </insert>
    <update id="update" parameterType="com.lib.model.Payload">
        update book b
        <set>
            <if test="entity.bookDamageLevel != null">
                b.`book_damage_level` = #{entity.bookDamageLevel},
            </if>
            <if test="entity.borrowable != null">
                b.`borrowable` = #{entity.borrowable},
            </if>
            <if test="entity.bookInfo.bookInfoId != null">
                b.`book_info_id` = #{entity.bookInfo.bookInfoId},
            </if>
            <if test="entity.updateBy != null">
                b.`update_by` = #{entity.updateBy},
            </if>
            <if test="1 == 1">
                b.`update_time` = now(),
            </if>
            <if test="entity.revision != null">
                b.`revision` = (1 + b.`revision`) % 2147483647,
            </if>
        </set>
        where b.`book_id` = #{id}
        and b.`revision` = #{entity.revision}
    </update>
    <delete id="delete" parameterType="com.lib.model.Payload">
        delete
        from book
        where book_id = #{id}
    </delete>
    <select id="getBy" resultMap="BaseResultMap">
        select b.`book_id`,
        b.`book_damage_level`,
        b.`borrowable`,
        b.`book_info_id`,
        b.`create_by`,
        b.`create_time`,
        b.`update_by`,
        b.`update_time`,
        b.`revision`
        from book b
        <where>
        </where>
    </select>
    <select id="getById" resultMap="BaseResultMap" parameterType="com.lib.model.Payload">
        select b.`book_id`,
               b.`book_damage_level`,
               b.`borrowable`,
               b.`book_info_id`,
               b.`create_by`,
               b.`create_time`,
               b.`update_by`,
               b.`update_time`,
               b.`revision`
        from book b
        where b.`book_id` = #{id}
    </select>

    <select id="getByUpdate" resultMap="BaseResultMap">
        select *
        from book b
        where b.`book_id` = #{id}
    </select>
</mapper>