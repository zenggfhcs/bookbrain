<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lib.bookbrain.dao.DebitMapper">
	<resultMap id="BaseResultMap" type="com.lib.bookbrain.model.entity.Debit">
		<id column="id" jdbcType="INTEGER" property="id"/>
		<result column="return_deadline" jdbcType="DATE" property="returnDeadline"/>
		<result column="return_time" jdbcType="TIME" property="returnTime"/>
		<result column="creation_time" jdbcType="TIMESTAMP" property="creationTime"/>
		<result column="last_updated_time" jdbcType="TIMESTAMP" property="lastUpdatedTime"/>
		<result column="revision" jdbcType="INTEGER" property="revision"/>
		<association property="book" javaType="com.lib.bookbrain.model.entity.Book" column="book_id"
		             select="com.lib.bookbrain.dao.BookMapper.getDebitBookById"/>
		<association property="createdBy" column="created_by" javaType="com.lib.bookbrain.model.entity.User"
		             select="com.lib.bookbrain.dao.UserMapper.getByOperatorId"/>
		<association property="updatedBy" column="updated_by" javaType="com.lib.bookbrain.model.entity.User"
		             select="com.lib.bookbrain.dao.UserMapper.getByOperatorId"/>
	</resultMap>
	<resultMap id="BookInfoRankingResultMap" type="com.lib.bookbrain.model.pojo.RankingsItem">
		<result column="debit_count" property="count" jdbcType="INTEGER"/>
		<association property="target" javaType="com.lib.bookbrain.model.entity.BookInfo" column="book_info_id"
		             select="com.lib.bookbrain.dao.BookInfoMapper.getInfoById"/>
	</resultMap>
	<resultMap id="ReaderRankingResultMap" type="com.lib.bookbrain.model.pojo.RankingsItem">
		<result column="debit_count" property="count" jdbcType="INTEGER"/>
		<association property="target" javaType="com.lib.bookbrain.model.entity.User" column="user_id"
		             select="com.lib.bookbrain.dao.UserMapper.getById"/>
	</resultMap>
	<select id="list" resultMap="BaseResultMap">
		select *
		from debit;
	</select>
	<select id="count">
		select count(*)
		from debit;
	</select>
	<select id="getById" resultMap="BaseResultMap">
		select distinct d.`id`,
		                d.`book_id`,
		                d.`return_deadline`,
		                d.`return_time`,
		                d.`created_by`,
		                d.`creation_time`,
		                d.`revision`
		from debit d
		where d.`id` = #{id}
	</select>

	<delete id="delete">
		delete
		from debit d
		where d.`id` = #{id}
	</delete>

	<insert id="insert" parameterType="com.lib.bookbrain.model.entity.Debit" useGeneratedKeys="true"
	        keyProperty="id">
		insert into debit (`book_id`, `return_deadline`,
		                   `return_time`, `created_by`, `creation_time`,
		                   `updated_by`, `last_updated_time`, `revision`)
		values (#{book.id}, DATE_ADD(current_date, INTERVAL 30 DAY),
		        null, #{createdBy.id}, NOW(),
		        #{updatedBy.id}, NOW(), 0);
	</insert>
	<insert id="remind" useGeneratedKeys="true">
		insert into reminder(debit_id, created_by, creation_time, updated_by, last_updated_time, revision, remark)
		VALUES (#{id}, #{createdBy.id}, now(), #{updatedBy.id}, now(), 0, '')
	</insert>

	<update id="update" parameterType="com.lib.bookbrain.model.exchange.Payload">
		update debit d
		<set>
			<if test="entity != null">
				<if test="entity.id != null">
					d.`book_id` = #{entity.id,jdbcType=INTEGER},
				</if>
				<if test="entity.returnDeadline != null">
					d.`return_deadline` = #{entity.returnDeadline,jdbcType=DATE},
				</if>
				<if test="entity.returnTime != null">
					d.`return_time` = #{entity.returnTime,jdbcType=DATE},
				</if>
				<if test="entity.updatedBy != null">
					d.`updated_by` = #{entity.updatedBy,jdbcType=INTEGER},
				</if>
			</if>
			<if test="1 == 1">
				d.`last_updated_time` = now(),
				d.`revision` = (1 + d.`revision`) % 2147483647,
			</if>
		</set>
		where d.`id` = #{id}
	</update>

	<update id="restore">
		update debit d, book b
		set b.`borrowable`        = 1,
		    d.`return_time`       = current_time,
		    d.`last_updated_time` = now(),
		    d.`revision`          = (1 + d.`revision`) % 2147483647,
		    d.`updated_by`        = #{updatedBy.id}
		where d.`id` = #{id}
		  and d.`book_id` = b.`id`
		  and d.return_time is null
		  and d.`revision` = #{revision}
	</update>

	<select id="getToUpdate" resultMap="BaseResultMap">
		select *
		from debit d
		where d.`id` = #{id}
	</select>

	<select id="filteredList" resultMap="BaseResultMap">
		select *
		from debit d
		<where>
			<if test="entity != null">
			</if>
			<if test="filter != null">
				<if test="filter.state != null">
					<if test="filter.state.start == 1">
						and d.`return_time` is not null
					</if>
					<if test="filter.state.start == 0">
						and (d.`return_time` is null and CURRENT_DATE > DATE_ADD(d.`return_deadline`, INTERVAL -3 DAY))
					</if>
					<if test="filter.state.start == -1">
						and (d.`return_time` is null and CURRENT_DATE > d.`return_deadline`)
					</if>
				</if>
				<if test="filter.creationTime != null">
					<if test="filter.creationTime.start != null and filter.creationTime.end != null">
						and d.`creation_time` between #{filter.creationTime.start} and #{filter.creationTime.end}
					</if>
				</if>
				<if test="filter.returnTime != null">
					<if test="filter.returnTime.start != null and filter.returnTime.end != null">
						and d.`return_time` between #{filter.returnTime.start} and #{filter.returnTime.end}
					</if>
				</if>
			</if>
		</where>
		order by d.last_updated_time desc , d.creation_time desc
		<trim>
			<if test="filter != null">
				<if test="filter.page != null">
					limit #{filter.page.start}, #{filter.page.end};
				</if>
			</if>
		</trim>

	</select>

	<select id="getLengthByFilter" resultType="int">
		select count(*)
		from debit d

		<where>
			<if test="entity != null">
			</if>
			<if test="filter != null">
			</if>
		</where>
	</select>
	<select id="getCountByUserId" resultType="int">
		select count(*)
		from debit d
		where d.`created_by` = #{id}
		  and d.`return_time` is null;
	</select>
	<select id="getExpiredByUserId" resultType="com.lib.bookbrain.model.entity.Debit">
		select *
		from debit d
		where d.`created_by` = #{id}
		  and d.`return_time` is null
		  and now() > d.`return_deadline`;
	</select>
	<select id="getBookCountByBookIdAndUserId" resultType="int">
		select (select b.`book_info_id`
		        from book b
		        where b.`id` = #{bookId})
			       in
			    (select b.`book_info_id`
			     from debit d
				          inner join book b on d.`book_id` = b.`id`
			     where d.`created_by` = #{userId})
	</select>
	<select id="getTodayDebitCount" resultType="java.lang.Integer">
		select count(*)
		from debit d
		where date(d.`creation_time`) = current_date
	</select>
	<select id="getTodayDebitReturnCount" resultType="java.lang.Integer">
		select count(*)
		from debit d
		where d.`return_time` is not null
		  and date(d.`return_time`) = current_date
		  and date(d.`last_updated_time`) = current_date
	</select>
	<select id="getCurrentDebitCountByUser" resultType="java.lang.Integer">
		select count(*)
		from debit d
		where d.`created_by` = #{id}
		  and d.`return_time` is null;
	</select>
	<select id="getCurrentExpiredDebitCountByUser" resultType="java.lang.Integer">
		select count(*)
		from debit d
		where d.`created_by` = #{id}
		  and d.`return_time` is null
		  and now() > d.`return_deadline`
		limit 1;
	</select>
	<select id="getCurrentDebitTheBookInfoCountByUserId" parameterType="com.lib.bookbrain.model.exchange.Payload"
	        resultType="java.lang.Integer">
		select #{bookInfoId}
			       in
			    (select distinct b.`book_info_id`
			     from debit d
				          inner join book b on d.`book_id` = b.`id`
			     where d.`created_by` = #{userId}
				    and d.`return_time` is null)
		;
	</select>
	<select id="getCurrentUnreturnedByUser" resultMap="BaseResultMap">
		select d.`id`,
		       d.`book_id`,
		       d.`return_deadline`,
		       d.`creation_time`,
		       d.`revision`
		from debit d
		where d.`created_by` = #{id}
		  and d.`return_time` is null
	</select>
	<select id="bookDebitRankings" resultMap="BookInfoRankingResultMap">
		select count(d_bif.`book_info_id`) debit_count,
		d_bif.`book_info_id`
		from debit_info d_bif
		<where>
			<if test="type != null and type != ''">
				and d_bif.`type` = #{type}
			</if>
			<if test="year != null">
				and year(d_bif.`debit_time`) = #{year}
			</if>
			<if test="month != null">
				and month(d_bif.`debit_time`) = #{month}
			</if>
		</where>
		group by d_bif.`book_info_id`
		order by debit_count desc
		<trim>
			<if test="size != null">
				limit #{size}
			</if>
			<if test="size == null">
				limit 10
			</if>
		</trim>
	</select>
	<select id="readerDebitRankings" resultMap="ReaderRankingResultMap">
		select count(d_bif.`book_info_id`) debit_count,
		d_bif.`user_id`
		from debit_info d_bif
		<where>
			<if test="type != null and type != ''">
				and d_bif.`type` = #{type}
			</if>
			<if test="year != null">
				and year(d_bif.`debit_time`) = #{year}
			</if>
			<if test="month != null">
				and month(d_bif.`debit_time`) = #{month}
			</if>
		</where>
		group by d_bif.`user_id`
		order by debit_count desc
		<trim>
			<if test="size != null">
				limit #{size}
			</if>
			<if test="size == null">
				limit 10
			</if>
		</trim>
	</select>
	<select id="getTodayRestoreCount" resultType="java.lang.Integer">
		select count(*)
		from debit d
		where d.return_time = current_date;
	</select>
</mapper>