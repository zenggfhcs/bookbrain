<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lib.bookbrain.dao.RoleMapper">
	<resultMap id="BaseResultMap" type="com.lib.bookbrain.model.entity.Role">
		<id property="id" column="id" jdbcType="INTEGER"/>
		<result property="name" column="name" jdbcType="VARCHAR"/>
		<result property="creationTime" column="creation_time" jdbcType="TIMESTAMP"/>
		<result property="lastUpdatedTime" column="last_updated_time" jdbcType="TIMESTAMP"/>
		<result property="revision" column="revision" jdbcType="INTEGER"/>
		<association property="createdBy" column="created_by" javaType="com.lib.bookbrain.model.entity.User"
		             select="com.lib.bookbrain.dao.UserMapper.getByOperatorId"/>
		<association property="updatedBy" column="updated_by" javaType="com.lib.bookbrain.model.entity.User"
		             select="com.lib.bookbrain.dao.UserMapper.getByOperatorId"/>
		<collection property="permissions" column="id" ofType="com.lib.bookbrain.model.entity.Permission"
		            select="getPermissionByRoleId"/>
		<collection property="routeItems" column="id" ofType="com.lib.bookbrain.model.entity.RouteItem"
		            select="getRouteByRoleId"/>
	</resultMap>
	<select id="getPermissionByRoleId" resultType="com.lib.bookbrain.model.entity.Permission">
		select p.id,
		       p.name,
		       p.remark,
		       p.revision
		from role_permission rp
			     inner join permission p on rp.permission_id = p.id
		where rp.role_id = #{id}
	</select>
	<select id="getRouteByRoleId" resultType="com.lib.bookbrain.model.entity.RouteItem">
		select r.*
		from role_route rr
			     inner join route r on rr.`route_id` = r.`id`
		where rr.`role_id` = #{id}
	</select>
	<select id="getById" resultMap="BaseResultMap">
		select r.name, r.id, r.remark, r.revision
		from role r
		where r.`id` = #{id};
	</select>

	<insert id="insert">
		insert into role(name, created_by, creation_time, updated_by, last_updated_time, revision, remark)
		values (#{name}, #{createdBy.id}, now(), #{updatedBy.id}, now(), 0, #{remark})
	</insert>
	<insert id="addPermission" useGeneratedKeys="true">
		insert into role_permission(role_id, permission_id)
		VALUES (#{id}, #{remark})
	</insert>
	<insert id="addRoute">
		insert into role_route(role_id, route_id)
		VALUES (#{id}, #{remark})
	</insert>

	<update id="update">
	</update>

	<delete id="delete">
		delete
		from role
		where `id` = #{id}
	</delete>
	<delete id="removePermission">
		delete rp
		from role_permission rp
		where rp.role_id = #{id}
		  and rp.permission_id = #{remark}
	</delete>
	<delete id="removeRoute">
		delete rr
		from role_route rr
		where rr.role_id = #{id}
		  and rr.route_id = #{remark}
	</delete>

	<select id="getToUpdate" resultType="com.lib.bookbrain.model.entity.Role">
	</select>

	<select id="filteredList" resultType="com.lib.bookbrain.model.entity.Role">
		select *
		from role r
		<where>

		</where>
		<trim>
			<if test="filter != null">
				<if test="filter.page != null">
					limit #{filter.page.start}, #{filter.page.end};
				</if>
			</if>
		</trim>
	</select>

	<select id="getLengthByFilter" resultType="int">
		select count(*)
		from role r
		<where>

		</where>
	</select>
	<select id="getByUserId" resultType="com.lib.bookbrain.model.entity.Role">
		select r.name, r.id, r.remark
		from user_role ur
			     inner join role r on ur.`role_id` = r.`id`
		where ur.`user_id` = #{id}
	</select>
</mapper>