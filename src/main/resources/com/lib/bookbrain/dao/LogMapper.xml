<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lib.bookbrain.dao.LogMapper">
	<resultMap id="BaseResultMap" type="com.lib.bookbrain.model.entity.Log">
		<id property="id" column="id" jdbcType="INTEGER"/>
		<result property="type" column="type" jdbcType="VARCHAR"/>
		<result property="serviceName" column="service_name" jdbcType="VARCHAR"/>
		<result property="dataId" column="data_id" jdbcType="INTEGER"/>
		<result property="input" column="input" jdbcType="LONGVARCHAR"/>
		<result property="output" column="output" jdbcType="LONGVARCHAR"/>
		<result property="elapsedTime" column="elapsed_time" jdbcType="INTEGER"/>
		<result property="createdBy" column="created_by" jdbcType="INTEGER"/>
		<result property="creationTime" column="creation_time" jdbcType="TIMESTAMP"/>
	</resultMap>
	<insert id="create" keyProperty="id" keyColumn="id"
	        useGeneratedKeys="true" parameterType="com.lib.bookbrain.model.entity.Log">
		insert into log(`type`, `service_name`, `data_id`, `input`, `output`, `elapsed_time`, `creation_time`,
		`created_by`)
		values (#{type}, #{serviceName}, #{dataId}, #{input}, #{output}, #{elapsedTime}, now(), #{createdBy})
	</insert>
	<update id="alter" parameterType="com.lib.bookbrain.model.entity.Log">
		update log l
		set l.`elapsed_time` = #{elapsedTime},
		l.`output`=#{output}
		where l.`id` = #{id}
	</update>

	<select id="getBy" resultMap="BaseResultMap">
		select *
		from log l
		<where>
			<if test="entity != null">
				<if test="entity.id != null">
					and l.`id` = #{entity.id}
				</if>
				<if test="entity.type != null and entity.type != ''">
					and l.`type` = #{entity.type}
				</if>
				<if test="entity.serviceName != null and entity.serviceName != ''">
					and l.`service_name` = #{entity.serviceName}
				</if>
			</if>
			<if test="filter != null">
				<if test="filter.creationTime != null">
					<if test="filter.creationTime.start != null">
						and l.`creation_time` >= #{filter.creationTime.start}
					</if>
					<if test="filter.creationTime.end != null">
						and #{filter.creationTime.end} >= l.`creation_time`
					</if>
				</if>
				<if test="filter.elapsedTime != null">
					<if test="filter.elapsedTime.start != null">
						and l.`elapsed_time` >= #{filter.elapsedTime.start}
					</if>
					<if test="filter.elapsedTime.end != null">
						and #{filter.elapsedTime.end} >= l.`elapsed_time`
					</if>
				</if>
			</if>
		</where>
		limit #{filter.page.start}, #{filter.page.end};
	</select>

	<select id="getCountByFilter" resultType="Integer">
		select count(*)
		from log l
		<where>
			<if test="entity != null">
				<if test="entity.id != null">
					and l.`id` = #{entity.id}
				</if>
				<if test="entity.type != null and entity.type != ''">
					and l.`type` = #{entity.type}
				</if>
				<if test="entity.serviceName != null and entity.serviceName != ''">
					and l.`service_name` = #{entity.serviceName}
				</if>
			</if>
			<if test="filter != null">
				<if test="filter.creationTime != null">
					<if test="filter.creationTime.start != null">
						and l.`creation_time` >= #{filter.creationTime.start}
					</if>
					<if test="filter.creationTime.end != null">
						and #{filter.creationTime.end} >= l.`creation_time`
					</if>
				</if>
				<if test="filter.elapsedTime != null">
					<if test="filter.elapsedTime.start != null">
						and l.`elapsed_time` >= #{filter.elapsedTime.start}
					</if>
					<if test="filter.elapsedTime.end != null">
						and #{filter.elapsedTime.end} >= l.`elapsed_time`
					</if>
				</if>
			</if>
		</where>
		;
	</select>

	<select id="getById" resultMap="BaseResultMap">
		select *
		from log l
		where l.`id` = #{id};
	</select>
</mapper>