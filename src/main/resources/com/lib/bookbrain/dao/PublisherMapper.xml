<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lib.bookbrain.dao.PublisherMapper">
    <resultMap id="BaseResultMap" type="com.lib.bookbrain.model.entity.Publisher">
        <id property="publishId" column="publish_id" jdbcType="INTEGER"/>
        <result property="name" column="name" jdbcType="INTEGER"/>
        <result property="remark" column="remark" jdbcType="VARCHAR"/>
        <result property="createBy" column="create_by" jdbcType="INTEGER"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateBy" column="update_by" jdbcType="INTEGER"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="revision" column="revision" jdbcType="INTEGER"/>
    </resultMap>
    <select id="getBy" resultMap="BaseResultMap">
        select distinct
        p.`publish_id`,
        p.`name`,
        p.`remark`,
        p.`create_by`,
        p.`create_time`,
        p.`update_by`,
        p.`update_time`,
        p.`revision`
        from publisher p
        <where>
            <if test="publishId != null">
                p.`publish_id` = #{publishId}
            </if>
            <if test="createBy != null">
                and p.`create_by` = #{createBy}
            </if>
            <if test="updateBy != null">
                and p.`update_by` = #{updateBy}
            </if>
            <if test="1 == 1">
                and p.`create_time` between #{minCreateTime} and #{maxCreateTime}
                and p.`update_time` between #{minUpdateTime} and #{maxUpdateTime}
            </if>
            <if test="name != null and name != ''">
                and p.`name` like concat('%', #{name}, '%')
            </if>
        </where>
    </select>
    <insert id="create" parameterType="com.lib.bookbrain.model.Payload" useGeneratedKeys="true" keyColumn="publishId">
        insert into publisher(name, remark, create_by, create_time, update_by, update_time, revision)
        values (#{name}, #{remark}, #{tokenBody.id}, NOW(), #{tokenBody.id}, NOW(),
                0)
    </insert>
    <update id="update" parameterType="com.lib.bookbrain.model.Payload">
        update publisher p
        <set>
            <if test="name != null and name != ''">
                p.`name` = #{name},
            </if>
            <if test="remark != null and remark != ''">
                p.`remark` = #{remark},
            </if>
            <if test="updateBy != null">
                p.`update_by` = #{updateBy},
            </if>
            <if test="1 == 1">
                p.`update_time` = NOW(),
                p.`revision` = (p.`revision` + 1) % 2147483647
            </if>
        </set>
        where p.`publish_id` = #{id} and p.`revision` = #{revision};
    </update>
    <delete id="delete" parameterType="com.lib.bookbrain.model.Payload">
        delete
        from publisher
        where publish_id = #{id}
    </delete>
    <select id="getById" resultMap="BaseResultMap" parameterType="com.lib.bookbrain.model.Payload">
        select p.`publish_id`,
               p.`name`,
               p.`remark`,
               p.`create_by`,
               p.`create_time`,
               p.`update_by`,
               p.`update_time`,
               p.`revision`
        from publisher p
        where p.`publish_id` = #{id}
    </select>

    <select id="getByUpdate" resultMap="BaseResultMap" parameterType="com.lib.bookbrain.model.Payload">
        select
        <trim suffixOverrides=",">
            <if test="name != null and name != ''">
                p.`name`,
            </if>
            <if test="remark != null and remark != ''">
                p.`remark`,
            </if>
            <if test="1 == 1">
                p.`revision`
            </if>
        </trim>
        from publisher p
        where p.`publish_id` = #{id}
    </select>
</mapper>